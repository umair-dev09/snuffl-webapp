#!/usr/bin/env node

const testRailwayEnhancedScraping = async () => {
    // Get Railway URL from environment or use default
    const railwayUrl = process.env.RAILWAY_CRAWL4AI_URL || 'https://your-railway-url.railway.app';
    const testUrl = "https://www.google.com/shopping/product/8888808767729539515?gl=in";
    
    console.log("üöÇ Testing Enhanced Google Shopping Scraping on Railway...");
    console.log(`üîó Railway URL: ${railwayUrl}`);
    console.log(`üì± Test URL: ${testUrl}`);
    
    // Test health check first
    console.log("\nüè• Testing health check...");
    try {
        const response = await fetch(`${railwayUrl}/health`);
        const result = await response.json();
        console.log("‚úÖ Health check:", result);
    } catch (error) {
        console.error("‚ùå Health check failed:", error.message);
        return;
    }
    
    // Test comprehensive Google Shopping scraping
    console.log("\nüõçÔ∏è Testing comprehensive Google Shopping scraping...");
    const startTime = Date.now();
    
    try {
        const response = await fetch(`${railwayUrl}/scrape-google-shopping`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                url: testUrl,
                extract_structured_data: true
            })
        });
        
        const result = await response.json();
        const endTime = Date.now();
        const duration = (endTime - startTime) / 1000;
        
        console.log(`‚è±Ô∏è Scraping took: ${duration.toFixed(2)} seconds`);
        
        if (result.success && result.product_data) {
            const data = result.product_data;
            console.log("\nüìä Extracted Data Summary:");
            console.log(`üè∑Ô∏è Title: ${data.title || 'Not extracted'}`);
            console.log(`üè≠ Brand: ${data.brand || 'Not extracted'}`);
            console.log(`üí∞ Price: ${data.price || 'Not extracted'}`);
            console.log(`üé® Price Range: ${data.price_range || 'Not extracted'}`);
            console.log(`üñºÔ∏è Images: ${data.image_urls?.length || 0} images`);
            console.log(`üìù Description: ${data.description ? 'Available' : 'Not extracted'}`);
            console.log(`‚ö° Features: ${data.features?.length || 0} features`);
            console.log(`üåà Colors: ${data.colors_available?.length || 0} colors`);
            console.log(`üìê Sizes: ${data.sizes_available?.length || 0} sizes`);
            console.log(`üìä Specifications: ${data.specifications ? Object.keys(data.specifications).length : 0} specs`);
            console.log(`‚öñÔ∏è Weight: ${data.weight || 'Not extracted'}`);
            console.log(`üìè Dimensions: ${data.dimensions || 'Not extracted'}`);
            console.log(`üì¶ Availability: ${data.availability_text || 'Not extracted'}`);
            console.log(`üõí Buying Options: ${data.buying_options?.length || 0} options`);
            console.log(`‚≠ê Average Rating: ${data.average_rating || 'Not extracted'}`);
            console.log(`üìã Total Reviews: ${data.total_reviews || 'Not extracted'}`);
            console.log(`üè∑Ô∏è Review Tags: ${data.review_tags?.length || 0} tags`);
            console.log(`üí¨ Sample Reviews: ${data.sample_reviews?.length || 0} sample reviews`);
            
            // Show detailed buying options if available
            if (data.buying_options?.length > 0) {
                console.log("\nüõí Buying Options Details:");
                data.buying_options.forEach((option, index) => {
                    console.log(`  ${index + 1}. ${option.seller_name || 'Unknown'} - ‚Çπ${option.price || 'N/A'}`);
                    if (option.delivery_info) console.log(`     üì¶ ${option.delivery_info}`);
                    if (option.offers) console.log(`     üéÅ ${option.offers}`);
                });
            }
            
            // Show sample reviews if available
            if (data.sample_reviews?.length > 0) {
                console.log("\nüí¨ Sample Reviews:");
                data.sample_reviews.forEach((review, index) => {
                    console.log(`  ${index + 1}. ‚≠ê${review.rating} - ${review.source || 'Unknown'}`);
                    console.log(`     "${review.review_text || 'No text'}"`);
                });
            }
            
        } else {
            console.log("‚ùå Scraping failed:", result.error || 'Unknown error');
        }
        
    } catch (error) {
        console.error("‚ùå Comprehensive scraping failed:", error.message);
    }
};

// Run the test
testRailwayEnhancedScraping();
